version: '3'

services:
  nginx:
    container_name: ${PROJECT_NAME}-nginx
    image: nginx:alpine
    working_dir: /app
    volumes:
      - ./app/docker/development/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./app/docker/development/nginx/certs:/etc/nginx/certs
      - ./app:/app
    restart: unless-stopped
    depends_on:
      - php-fpm
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    networks:
      internal: ~
      external:
        ipv4_address: ${PROJECT_IP}
        aliases:
          - ${PROJECT_NAME}.local

  php-fpm:
    container_name: ${PROJECT_NAME}-php-fpm
    user: "${USER_ID}:${GROUP_ID}"
    build:
      context: ./app/docker/development/php-fpm
      args:
        - USER_ID
        - GROUP_ID
    volumes:
      - ./app/docker/development/php-fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ./app/docker/development/php-fpm/xdebug.ini:/usr/local/etc/php/conf.d/xdebug-dev.ini
      - ./app/docker/development/php-fpm/php.ini:/usr/local/etc/php/conf.d/40-custom.ini
      - ./app:/app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      COMPOSER_MEMORY_LIMIT: -1
      XDEBUG_CONFIG: client_host=${XDEBUG_CLIENT_HOST} client_port=${XDEBUG_CLIENT_PORT}
      PHP_IDE_CONFIG: serverName=${XDEBUG_IDE_SERVER_NAME}
    networks:
      - internal

  php-workers:
    container_name: ${PROJECT_NAME}-php-workers
    build:
      context: ./app/docker/development/php-workers
      args:
        - USER_ID
        - GROUP_ID
    volumes:
      - ./app/docker/development/php-workers/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ./app/docker/development/php-workers/xdebug.ini:/usr/local/etc/php/conf.d/xdebug-dev.ini
      - ./app/docker/development/php-workers/php.ini:/usr/local/etc/php/conf.d/40-custom.ini
      - ./app/docker/development/php-workers/supervisord.conf:/etc/supervisor/supervisord.conf
      - ./app/docker/development/php-workers/workers.conf:/etc/supervisor/conf.d/workers.conf
      - ./app:/app
    ports:
      - "9111:9111"
    command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
    restart: unless-stopped
    depends_on:
      - postgres
      - rabbit
    env_file:
      - .env
    environment:
      COMPOSER_MEMORY_LIMIT: -1
      XDEBUG_CONFIG: client_host=${XDEBUG_CLIENT_HOST} client_port=${XDEBUG_CLIENT_PORT}
      PHP_IDE_CONFIG: serverName=${XDEBUG_IDE_SERVER_NAME}
    networks:
      - internal

  php-cli:
    container_name: ${PROJECT_NAME}-php-cli
    user: "${USER_ID}:${GROUP_ID}"
    build:
      context: ./app/docker/development/php-cli
      args:
        - USER_ID
        - GROUP_ID
    volumes:
      - ./app/docker/development/php-cli/php.ini:/usr/local/etc/php/conf.d/40-custom.ini
      - ./app:/app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      COMPOSER_MEMORY_LIMIT: -1
    networks:
      - internal

  postgres:
    container_name: ${PROJECT_NAME}-postgres
    image: postgres:12
    command: ["postgres", "-c", "log_statement=all"]
    shm_size: 512mb
    volumes:
      - ./app/docker/development/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./volumes/postgres/data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    networks:
      - internal

  rabbit:
    container_name: ${PROJECT_NAME}-rabbit
    hostname: rabbit
    build:
      context: ./app/docker/development/rabbit
    volumes:
      - ./volumes/rabbit/data:/var/lib/rabbitmq/mnesia/
    restart: unless-stopped
    ports:
      - "${RABBIT_PORT}:5672"
      - "${RABBIT_MANAGER_PORT}:15672"
      - "${RABBIT_METRIC_PORT}:15692"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    env_file:
      - .env
    environment:
        RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
        RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    networks:
      - internal

  redis:
    container_name: ${PROJECT_NAME}-redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./volumes/redis/data:/data
    command:
      - 'redis-server'
      - '--databases ${REDIS_DATABASES}'
      - '--save 900 1'
      - '--save 300 10'
      - '--save 60 10000'
      - '--requirepass ${REDIS_PASSWORD}'
    networks:
      - internal

  prometheus:
    container_name: ${PROJECT_NAME}-prometheus
    image: prom/prometheus:latest
    user: root
    volumes:
      - ./app/docker/development/prometheus:/etc/prometheus
      - ./volumes/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=10d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - internal

  grafana:
    container_name: ${PROJECT_NAME}-grafana
    image: grafana/grafana:latest
    user: root
    volumes:
      - ./volumes/grafana/data:/var/lib/grafana
      - ./app/docker/development/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./app/docker/development/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - internal

  mailer:
    image: mailhog/mailhog
    container_name: ${PROJECT_NAME}-mailhog
    ports:
      - "${MAILHOG_PORT}:1025"
      - "${MAILHOG_MANAGER_PORT}:8025"
    networks:
      - external
      - internal

networks:
  external:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${PROJECT_SUBNET}
  internal:
    driver: bridge
#    internal: true

