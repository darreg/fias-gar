version: '3'

services:
  nginx:
    container_name: ${PROJECT_NAME}-nginx
    image: nginx:alpine
    working_dir: /app
    volumes:
#      - socket:/var/run
      - ./docker/nginx/default.nginx:/etc/nginx/conf.d/default.conf
      - ./app:/app
      - ./docker/nginx/certs:/etc/nginx/certs
    restart: always
    ports:
      - ${NGINX_LOCAL_HTTP_PORT}:80
      - ${NGINX_LOCAL_HTTPS_PORT}:443
    networks:
      internal:
        ipv4_address: ${PROJECT_IP}
        aliases:
          - ${PROJECT_NAME}.local

  php-fpm:
    container_name: ${PROJECT_NAME}-php-fpm
    user: "${USER_ID}:${GROUP_ID}"
    build:
      context: ./docker/php-fpm
      args:
        - USER_ID
        - GROUP_ID
    volumes:
#      - socket:/var/run
      - ./docker/php-fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ./docker/php-fpm/xdebug.ini:/usr/local/etc/php/conf.d/xdebug-dev.ini
      - ./docker/php-fpm/php.ini:/usr/local/etc/php/conf.d/40-custom.ini
      - ./app:/app
    restart: always
    depends_on:
      - nginx
      - postgres
      - redis
#      - rabbit
    environment:
      COMPOSER_MEMORY_LIMIT: -1
      XDEBUG_CONFIG: client_host=${XDEBUG_CLIENT_HOST} client_port=${XDEBUG_CLIENT_PORT}
      PHP_IDE_CONFIG: serverName=${XDEBUG_IDE_SERVER_NAME}
    env_file:
      - .env
    networks:
      - internal

  php-cli:
    container_name: ${PROJECT_NAME}-php-cli
    user: "${USER_ID}:${GROUP_ID}"
    build:
      context: ./docker/php-cli
      args:
        - USER_ID
        - GROUP_ID
    volumes:
      - ./docker/php-cli/xdebug.ini:/usr/local/etc/php/conf.d/xdebug-dev.ini
      - ./docker/php-cli/php.ini:/usr/local/etc/php/conf.d/40-custom.ini
      - ./docker/php-cli/supervisord.conf:/etc/supervisor/supervisord.conf
      - ./app:/app
    ports:
      - 9111:9111
    command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
    restart: always
    depends_on:
      - nginx
      - postgres
      - redis
#      - rabbit
    environment:
      COMPOSER_MEMORY_LIMIT: -1
      XDEBUG_CONFIG: client_host=${XDEBUG_CLIENT_HOST} client_port=${XDEBUG_CLIENT_PORT}
      PHP_IDE_CONFIG: serverName=${XDEBUG_IDE_SERVER_NAME}
    env_file:
      - .env
    networks:
      - internal

  postgres:
    container_name: ${PROJECT_NAME}-postgres
    image: postgres:12
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres/data:/var/lib/postgresql/data
    shm_size: 512mb
    restart: always
    depends_on:
      - nginx
    ports:
      - ${POSTGRES_LOCAL_PORT}:5432
    env_file:
      - .env
    networks:
      - internal

  redis:
    container_name: ${PROJECT_NAME}-redis
    image: redis:latest
    restart: always
    depends_on:
      - nginx
    ports:
      - ${REDIS_LOCAL_PORT}:6379
    volumes:
      - ./docker/redis/data:/data
    networks:
      - internal

  rabbit:
    container_name: ${PROJECT_NAME}-rabbit
    hostname: rabbit
    image: rabbitmq:3.6.6-management
    depends_on:
      - nginx
    volumes:
      - ./docker/rabbit/data:/var/lib/rabbitmq/mnesia/
    ports:
      - ${RABBIT_LOCAL_PORT}:5672
      - ${RABBIT_MANAGER_LOCAL_PORT}:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    env_file:
      - .env
    networks:
      - internal

  elasticsearch:
    container_name: ${PROJECT_NAME}-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    user: ${USER_ID}:${GROUP_ID}
    volumes:
      - ./docker/elastic:/usr/share/elasticsearch/data
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      - nginx
    ports:
      - ${ELASTICSEARCH_LOCAL_PORT}:9200
      - ${ELASTICSEARCH_NODES_LOCAL_PORT}:9300
    networks:
      - internal

  kibana:
    container_name: ${PROJECT_NAME}-kibana
    image: docker.elastic.co/kibana/kibana:7.9.2
    depends_on:
      - nginx
      - elasticsearch
    ports:
      - ${KIBANA_LOCAL_PORT}:5601
    networks:
      - internal

#  logstash:
#    container_name: ${PROJECT_NAME}-logstash
#    image: docker.elastic.co/logstash/logstash:7.9.2
#    volumes:
#      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#      - ./docker/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
#      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
#      - ./docker/logstash/queries:/usr/share/logstash/config/queries
#    depends_on:
#      - nginx
#      - elasticsearch
#    ports:
#      - ${LOGSTASH_LOCAL_PORT}:5000
#    networks:
#      - internal

  mailhog:
    image: mailhog/mailhog
    container_name: ${PROJECT_NAME}-mailhog
    depends_on:
      - nginx
    ports:
      - ${MAILHOG_LOCAL_PORT}:1025
      - ${MAILHOG_MANAGER_PORT}:8025
    networks:
      - internal

  sentry-postgres:
    image: postgres
    container_name: ${PROJECT_NAME}-sentry-postgres
    depends_on:
      - nginx
    volumes:
      - ./docker/sentry/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${SENTRY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SENTRY_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SENTRY_POSTGRES_DB}
    networks:
      - internal

  sentry:
    image: sentry
    container_name: ${PROJECT_NAME}-sentry
    depends_on:
      - nginx
      - redis
      - sentry-postgres
    ports:
      - ${SENTRY_LOCAL_PORT}:9000
    environment:
      SENTRY_POSTGRES_HOST: ${PROJECT_NAME}-sentry-postgres
      SENTRY_REDIS_HOST: ${PROJECT_NAME}-redis
    env_file:
      - .env
    networks:
      - internal

  sentry-cron:
    image: sentry
    container_name: ${PROJECT_NAME}-sentry-cron
    depends_on:
      - nginx
      - redis
      - sentry-postgres
    command: "sentry run cron"
    environment:
      SENTRY_POSTGRES_HOST: ${PROJECT_NAME}-sentry-postgres
      SENTRY_REDIS_HOST: ${PROJECT_NAME}-redis
    env_file:
      - .env
    networks:
      - internal

  sentry-worker:
    image: sentry
    container_name: ${PROJECT_NAME}-sentry-worker
    depends_on:
      - nginx
      - redis
      - sentry-postgres
    command: "sentry run worker"
    environment:
      SENTRY_POSTGRES_HOST: ${PROJECT_NAME}-sentry-postgres
      SENTRY_REDIS_HOST: ${PROJECT_NAME}-redis
    env_file:
      - .env
    networks:
      - internal

#volumes:
#  socket:

networks:
  internal:
    driver: bridge
    name: ${PROJECT_NAME}_internal_network
    ipam:
      driver: default
      config:
        - subnet: ${PROJECT_SUBNET}
